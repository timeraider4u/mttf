/*
 * generated by Xtext 2.10.0
 */
package at.jku.weiner.mttf.tests

import at.jku.weiner.mttf.mttf.TestSuite
import com.google.inject.Inject
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.eclipse.xtext.junit4.validation.ValidationTestHelper
import at.jku.weiner.mttf.validation.MttfValidator
import at.jku.weiner.mttf.mttf.MttfPackage
import org.junit.Before
import org.eclipse.core.resources.IProject
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.core.runtime.Plugin
import org.eclipse.core.runtime.NullProgressMonitor

@RunWith(XtextRunner)
@InjectWith(MttfInjectorProvider)
class MttfParsingTest{

	@Inject
	ParseHelper<TestSuite> parseHelper
	@Inject 
	ValidationTestHelper validationHelper
	
	@Before
	def void setUp() {
		System.out.println("void setUp()");
//		val plugin = ResourcesPlugin.getPlugin();
//		val bundle = plugin.getBundle();


//		val root = ResourcesPlugin.getWorkspace().getRoot();
//		val projects = root.getProjects();
//		System.out.println("projects='" + projects + "'");
//		System.out.println("projects.length='" + projects.length + "'");
//		for (project : projects) {
//			val name = project.getName();
//			val path = project.getProjectRelativePath();
//			System.out.println("found project='" + name 
//				+ "' with path='" + path + "'"
//			);
//		}
		
		
//		val bundleName = bundle.getSymbolicName();
//		System.out.println("bundleName='" + bundleName + "'");
//		val project = root.getProject(bundleName);
//		if (project.exists()) {
//			project.delete(true, true, new NullProgressMonitor());
//		}
//		project.create(new NullProgressMonitor());
//		project.open(new NullProgressMonitor());
	}

	@Test 
	def void testSimpleTestSuite() {
		System.out.println("testSimpleTestSuite-begin");
		val result = parseHelper.parse('''
			test-suite
				source-metamodel="platform:/plugin/at.jku.weiner.mttf.tests/metamodels/Class.xmi"
				target-metamodel="platform:/plugin/at.jku.weiner.mttf.tests/metamodels/Relational.xmi"
				transformation="platform:/plugin/at.jku.weiner.mttf.tests/transformations/Class2Relational.atl"
		''')
		Assert.assertNotNull(result)
		validationHelper.assertNoErrors(result)
		Assert.assertNull(result.name)
		val sut = result.sut
		Assert.assertNotNull(sut)
		val sourceMM = sut.sourceMetaModel
		Assert.assertNotNull(sourceMM)
		Assert.assertEquals("platform:/plugin/at.jku.weiner.mttf.tests/metamodels/Class.xmi", sourceMM.uri);
		val targetMM = sut.targetMetaModel
		Assert.assertNotNull(targetMM)
		Assert.assertEquals("platform:/plugin/at.jku.weiner.mttf.tests/metamodels/Relational.xmi", targetMM.uri);
		val trafo = sut.transformationUnderTest
		Assert.assertNotNull(trafo)
		Assert.assertEquals("platform:/plugin/at.jku.weiner.mttf.tests/transformations/Class2Relational.atl", trafo.uri);
		Assert.assertNotNull(result.testCases)
		Assert.assertTrue(result.testCases.isEmpty())
		System.out.println("testSimpleTestSuite-end");
	}
	
	@Test
	def void testSimpleTestSuiteWithName() {
		val result = parseHelper.parse('''
			test-suite name=Class2Relational_TestSuite
				source-metamodel="platform:/plugin/at.jku.weiner.mttf.tests/metamodels/Class.xmi"
				target-metamodel="platform:/plugin/at.jku.weiner.mttf.tests/metamodels/Relational.xmi"
				transformation="platform:/plugin/at.jku.weiner.mttf.tests/transformations/Class2Relational.atl"
		''')
		Assert.assertNotNull(result)
		validationHelper.assertNoErrors(result)
		Assert.assertEquals("Class2Relational_TestSuite", result.name)
	}
	
	@Test
	def void testSimpleTestSuiteWithEmptySourceMM() {
		val result = parseHelper.parse('''
			test-suite name=Class2Relational_TestSuite
				source-metamodel=""
				target-metamodel="platform:/plugin/at.jku.weiner.mttf.tests/metamodels/Relational.ecore"
				transformation="platform:/plugin/at.jku.weiner.mttf.tests/transformations/Class2Relational.atl"
		''')
		Assert.assertNotNull(result)
		validationHelper.assertError(result, MttfPackage::eINSTANCE.sourceMetaModel, 
			MttfValidator.SOURCE_MM_IS_EMPTY, MttfValidator.MSG_SOURCE_MM_IS_EMTPY
		);
	}
	
	@Test
	def void testSimpleTestSuiteWithEmptyTargetMM() {
		val result = parseHelper.parse('''
			test-suite name=Class2Relational_TestSuite
				source-metamodel="platform:/plugin/at.jku.weiner.mttf.tests/metamodels/Class.ecore"
				target-metamodel=""
				transformation="platform:/plugin/at.jku.weiner.mttf.tests/transformations/Class2Relational.atl"
		''')
		Assert.assertNotNull(result)
		validationHelper.assertError(result, MttfPackage::eINSTANCE.targetMetaModel, 
			MttfValidator.TARGET_MM_IS_EMPTY, MttfValidator.MSG_TARGET_MM_IS_EMTPY
		);
	}
	
	@Test
	def void testSimpleTestSuiteWithEmptyTrafo() {
		val result = parseHelper.parse('''
			test-suite name=Class2Relational_TestSuite
				source-metamodel="platform:/plugin/at.jku.weiner.mttf.tests/metamodels/Class.ecore"
				target-metamodel="platform:/plugin/at.jku.weiner.mttf.tests/metamodels/Relational.ecore"
				transformation=""
		''')
		Assert.assertNotNull(result)
		validationHelper.assertError(result, MttfPackage::eINSTANCE.transformationUnderTest, 
			MttfValidator.TRAFO_IS_EMPTY, MttfValidator.MSG_TRAFO_IS_EMTPY
		);
	}

}
