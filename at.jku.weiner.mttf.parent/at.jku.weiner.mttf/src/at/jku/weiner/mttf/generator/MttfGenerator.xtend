/*
 * generated by Xtext 2.10.0
 */
package at.jku.weiner.mttf.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.builder.EclipseResourceFileSystemAccess2
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import at.jku.weiner.mttf.mttf.TestSuite
import at.jku.weiner.mttf.utils.EclipseUtilities
import org.eclipse.xtext.generator.OutputConfiguration
import java.io.ByteArrayInputStream

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MttfGenerator extends AbstractGenerator {
	
	public static final String MTTF_GEN_CONFIG_ID = MttfGenerator.package.name;
	public static final String MTTF_GEN_OUTPUT = "./mttf-gen";
	public static final String ENCODING = "UTF-8";

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		setUpFileSystemConfiguration(resource, fsa);
		val suite = resource.getContents().filter(typeof(TestSuite)).head;
		val sut = suite.sut
		val srcMMUri = sut.sourceMetaModel.uri
		val dstMMUri = sut.targetMetaModel.uri
		val transformationUri = sut.transformationUnderTest.uri
		generateCombinedMetamodel(resource, fsa, srcMMUri, dstMMUri, transformationUri);
	}
	
	def void setUpFileSystemConfiguration(Resource resource, IFileSystemAccess2 fsa) {
		if (!(fsa instanceof EclipseResourceFileSystemAccess2)) {
			return;
		}
		val fsa2 = fsa as EclipseResourceFileSystemAccess2;
		fsa2.setMonitor(EclipseUtilities.getProgressMonitor());
		val project = EclipseUtilities.getProjectFor(resource);
		fsa2.setProject(project);
		val outputs = fsa2.getOutputConfigurations();
		val outputConfig = createOutputConfiguration();
		outputs.put(MTTF_GEN_CONFIG_ID, outputConfig);
		fsa2.setOutputConfigurations(outputs);
	}
	
	def OutputConfiguration createOutputConfiguration() {
		val outputConfig = new OutputConfiguration(MTTF_GEN_CONFIG_ID);
		outputConfig.setCanClearOutputDirectory(true);
		outputConfig.setCleanUpDerivedResources(true);
		outputConfig.setCreateOutputDirectory(true);
		outputConfig.setDescription("mttf output folder");
		outputConfig.setOutputDirectory(MTTF_GEN_OUTPUT);
		outputConfig.setOverrideExistingResources(true);
		outputConfig.setSetDerivedProperty(true);
		return outputConfig;
	}
	
	def void generateCombinedMetamodel(Resource resource, IFileSystemAccess2 fsa, 
		String srcMMUri, String dstMMUri, String transformationUri) {
		val combinedMMName = "/metamodels/" + getTransformationNameFrom(transformationUri);
		val combinedMMContent = getCombinedMMContent(srcMMUri, dstMMUri);
		System.out.println("combinedMMName='" + combinedMMName + "'");
		System.out.println("combinedMMContent='" + combinedMMContent + "'");
		val content = new ByteArrayInputStream(combinedMMContent.getBytes(ENCODING));
		fsa.generateFile(combinedMMName, MTTF_GEN_CONFIG_ID, content);
	}
	
	def String getTransformationNameFrom(String transformation) {
		val index = transformation.lastIndexOf("/");
		val result = transformation.substring(index + 1) + ".xmi";
		return result
	}
	
	def String getCombinedMMContent(String srcMMUri, String dstMMUri) {
		val result = 'abc';
		return result;
	}
	
}
